diff --git a/apps/openmw/mwrender/bulletdebugdraw.cpp b/apps/openmw/mwrender/bulletdebugdraw.cpp
index b008ebc6d92c1f565eccf1018c234e669f88b49d..7e979c0fec2008e93a684dde359f083dee181aab 100644
--- a/apps/openmw/mwrender/bulletdebugdraw.cpp
+++ b/apps/openmw/mwrender/bulletdebugdraw.cpp
@@ -1,6 +1,7 @@
 #include <algorithm>
 
 #include <BulletCollision/CollisionDispatch/btCollisionWorld.h>
+#include <BulletCollision/CollisionShapes/btHeightfieldTerrainShape.h>
 
 #include <osg/Geometry>
 #include <osg/Group>
@@ -15,6 +16,8 @@
 #include "bulletdebugdraw.hpp"
 #include "vismask.hpp"
 
+#include "../mwmechanics/actorutil.hpp"
+
 #include <components/resource/resourcesystem.hpp>
 #include <components/resource/scenemanager.hpp>
 
@@ -92,6 +95,35 @@ void DebugDrawer::step()
         mVertices->clear();
         mColors->clear();
         mShapesRoot->removeChildren(0, mShapesRoot->getNumChildren());
+        auto player = MWMechanics::getPlayer();
+        if (player)
+        {
+            osg::Vec3f playerPos = player.getRefData().getPosition().asVec3();
+            auto objArray = mWorld->getCollisionObjectArray();
+            for(ptrdiff_t i = 0; i < objArray.size(); i++)
+            {
+                auto obj = objArray[i];
+                osg::Vec3f origin = Misc::Convert::toOsg(obj->getWorldTransform().getOrigin());
+                auto shape = obj->getCollisionShape();
+                float radius = 0;
+                osg::Vec3f offset{};
+                if(shape)
+                {
+                    btVector3 minCoord, maxCoord;
+                    shape->getAabb(obj->getWorldTransform(), minCoord, maxCoord);
+                    origin = Misc::Convert::toOsg(maxCoord+minCoord)/2.0;
+                    radius = (Misc::Convert::toOsg(maxCoord)-origin).length();
+                }
+                float newRadius = 2048+radius;
+
+                auto flags = obj->getCollisionFlags();
+                if((origin - playerPos).length2() <= newRadius*newRadius)
+                    flags &= ~btCollisionObject::CF_DISABLE_VISUALIZE_OBJECT;
+                else
+                    flags |= btCollisionObject::CF_DISABLE_VISUALIZE_OBJECT;
+                obj->setCollisionFlags(flags);
+            }
+        }
         mWorld->debugDrawWorld();
         showCollisions();
         mDrawArrays->setCount(mVertices->size());
