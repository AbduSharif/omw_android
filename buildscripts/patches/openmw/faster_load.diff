diff --git a/components/bsa/bsa_file.cpp b/components/bsa/bsa_file.cpp
index 9fc6448c2b5dfdab493f917f4a8ca6cc7aa02d6f..fd72fd151e6882f192f0afe1930d839287435111 100644
--- a/components/bsa/bsa_file.cpp
+++ b/components/bsa/bsa_file.cpp
@@ -258,9 +258,27 @@ void Bsa::BSAFile::close()
     mIsLoaded = false;
 }
 
+namespace
+{
+    void closeHandle(void* hdl)
+    {
+        return Platform::File::close(static_cast<Platform::File::Handle>(reinterpret_cast<intptr_t>(hdl)));
+    }
+}
+
 Files::IStreamPtr Bsa::BSAFile::getFile(const FileStruct *file)
 {
-    return Files::openConstrainedFileStream(mFilename, file->offset, file->fileSize);
+    std::lock_guard<std::mutex> lock(mCacheMutex);
+    const auto id = std::this_thread::get_id();
+    const auto it = mCache.lower_bound(id);
+    if (it != mCache.end() && it->first == id)
+        return Files::openConstrainedFileStreamWithSharedHandle(it->second, file->offset, file->fileSize);
+    else
+    {
+        std::shared_ptr<void> source((void*)(Platform::File::open(mFilename.c_str())), &closeHandle);
+        mCache.insert(it, std::pair<std::thread::id, std::shared_ptr<void>>(id, source));
+        return Files::openConstrainedFileStreamWithSharedHandle(source, file->offset, file->fileSize);
+    }
 }
 
 void Bsa::BSAFile::addFile(const std::string& filename, std::istream& file)
diff --git a/components/bsa/bsa_file.hpp b/components/bsa/bsa_file.hpp
index f6af2e3269ceae50302d0149a8b78f8b9a0134d1..800e132ab482ca4b64fa34382ae247861d3c355d 100644
--- a/components/bsa/bsa_file.hpp
+++ b/components/bsa/bsa_file.hpp
@@ -25,7 +25,10 @@
 #define BSA_BSA_FILE_H
 
 #include <cstdint>
+#include <map>
+#include <mutex>
 #include <string>
+#include <thread>
 #include <vector>
 
 #include <components/files/istreamptr.hpp>
@@ -94,6 +97,9 @@ protected:
     virtual void readHeader();
     virtual void writeHeader();
 
+    std::mutex mCacheMutex;
+    std::map<std::thread::id, std::shared_ptr<void>> mCache;
+
 public:
     /* -----------------------------------
      * BSA management methods
diff --git a/components/files/constrainedfilestream.cpp b/components/files/constrainedfilestream.cpp
index a56ae01aa07f4dec260ecc389f3de0fe25f11608..15929f57bd2586b6e19c41b09fe1ed1a929be6c0 100644
--- a/components/files/constrainedfilestream.cpp
+++ b/components/files/constrainedfilestream.cpp
@@ -6,4 +6,10 @@ namespace Files
     {
         return std::make_unique<ConstrainedFileStream>(std::make_unique<ConstrainedFileStreamBuf>(filename, start, length));
     }
+
+    IStreamPtr openConstrainedFileStreamWithSharedHandle(std::shared_ptr<void> hdl, std::size_t start, std::size_t length)
+    {
+        return std::make_unique<Files::StreamWithBuffer<Files::ConstrainedFileStreamBufWithSharedHandle>>(
+            std::make_unique<ConstrainedFileStreamBufWithSharedHandle>(hdl, start, length));
+    }
 }
diff --git a/components/files/constrainedfilestream.hpp b/components/files/constrainedfilestream.hpp
index f00bd3a4883db1245dc32395e375f910f1f37468..9c428289eea8b20c10c54f812385da76c3171955 100644
--- a/components/files/constrainedfilestream.hpp
+++ b/components/files/constrainedfilestream.hpp
@@ -6,6 +6,7 @@
 #include "istreamptr.hpp"
 
 #include <limits>
+#include <memory>
 #include <string>
 
 namespace Files
@@ -17,6 +18,9 @@ using ConstrainedFileStream = StreamWithBuffer<ConstrainedFileStreamBuf>;
 IStreamPtr openConstrainedFileStream(const std::string& filename, std::size_t start = 0,
     std::size_t length = std::numeric_limits<std::size_t>::max());
 
+IStreamPtr openConstrainedFileStreamWithSharedHandle(std::shared_ptr<void> hdl, std::size_t start = 0,
+    std::size_t length = std::numeric_limits<std::size_t>::max());
+
 }
 
 #endif
diff --git a/components/files/constrainedfilestreambuf.cpp b/components/files/constrainedfilestreambuf.cpp
index f5fd8ac3947911e40f8869d680e23504707a376a..8f18a55d62c647e5ed670961e5c6bfbd784b8e37 100644
--- a/components/files/constrainedfilestreambuf.cpp
+++ b/components/files/constrainedfilestreambuf.cpp
@@ -7,10 +7,10 @@ namespace Files
 {
     namespace File = Platform::File;
     
-    ConstrainedFileStreamBuf::ConstrainedFileStreamBuf(const std::string& fname, std::size_t start, std::size_t length)
-        : mOrigin(start)
+    void ConstrainedFileStreamBufBase::init(File::Handle hdl, std::size_t start, std::size_t length)
     {
-        mFile = File::open(fname.c_str());
+        mOrigin = start;
+        mFile = hdl;
         mSize  = length != std::numeric_limits<std::size_t>::max() ? length : File::size(mFile) - start;
 
         if (start != 0)
@@ -19,7 +19,7 @@ namespace Files
         setg(nullptr, nullptr, nullptr);
     }
 
-    std::streambuf::int_type ConstrainedFileStreamBuf::underflow()
+    std::streambuf::int_type ConstrainedFileStreamBufBase::underflow()
     {
         if (gptr() == egptr())
         {
@@ -35,7 +35,7 @@ namespace Files
         return traits_type::to_int_type(*gptr());
     }
 
-    std::streambuf::pos_type ConstrainedFileStreamBuf::seekoff(off_type offset, std::ios_base::seekdir whence, std::ios_base::openmode mode)
+    std::streambuf::pos_type ConstrainedFileStreamBufBase::seekoff(off_type offset, std::ios_base::seekdir whence, std::ios_base::openmode mode)
     {
         if ((mode & std::ios_base::out) || !(mode & std::ios_base::in))
             return traits_type::eof();
@@ -68,7 +68,7 @@ namespace Files
         return newPos;
     }
 
-    std::streambuf::pos_type ConstrainedFileStreamBuf::seekpos(pos_type pos, std::ios_base::openmode mode)
+    std::streambuf::pos_type ConstrainedFileStreamBufBase::seekpos(pos_type pos, std::ios_base::openmode mode)
     {
         if ((mode & std::ios_base::out) || !(mode & std::ios_base::in))
             return traits_type::eof();
@@ -82,4 +82,16 @@ namespace Files
         setg(nullptr, nullptr, nullptr);
         return pos;
     }
+
+    ConstrainedFileStreamBuf::ConstrainedFileStreamBuf(const std::string& fname, std::size_t start, std::size_t length)
+        : mFile(File::open(fname.c_str()))
+    {
+        init(mFile, start, length);
+    }
+
+    ConstrainedFileStreamBufWithSharedHandle::ConstrainedFileStreamBufWithSharedHandle(FileHandlePtr ptr, std::size_t start, std::size_t length)
+        : mFile(ptr)
+    {
+        init(static_cast<Platform::File::Handle>(reinterpret_cast<intptr_t>(mFile.get())), start, length);
+    }
 }
diff --git a/components/files/constrainedfilestreambuf.hpp b/components/files/constrainedfilestreambuf.hpp
index bb9d6ca89effda70b64360f3231bc89c7dbe67fa..272c1a73e88b1e2655446d9462b1aa40c0517ec8 100644
--- a/components/files/constrainedfilestreambuf.hpp
+++ b/components/files/constrainedfilestreambuf.hpp
@@ -3,15 +3,15 @@
 
 #include <components/platform/file.hpp>
 
+#include <memory>
 #include <streambuf>
 
 namespace Files
 {
-    /// A file streambuf constrained to a specific region in the file, specified by the 'start' and 'length' parameters.
-    class ConstrainedFileStreamBuf final : public std::streambuf
+    class ConstrainedFileStreamBufBase : public std::streambuf
     {
     public:
-        ConstrainedFileStreamBuf(const std::string& fname, std::size_t start, std::size_t length);
+        void init(Platform::File::Handle hdl, std::size_t start, std::size_t length);
 
         int_type underflow() final;
 
@@ -22,9 +22,30 @@ namespace Files
     private:
         std::size_t mOrigin;
         std::size_t mSize;
-        Platform::File::ScopedHandle mFile;
+        Platform::File::Handle mFile;
         char mBuffer[8192]{ 0 };
     };
+
+    /// A file streambuf constrained to a specific region in the file, specified by the 'start' and 'length' parameters.
+    class ConstrainedFileStreamBuf final : public ConstrainedFileStreamBufBase
+    {
+    public:
+        ConstrainedFileStreamBuf(const std::string& fname, std::size_t start, std::size_t length);
+
+    private:
+        Platform::File::ScopedHandle mFile;
+    };
+
+    class ConstrainedFileStreamBufWithSharedHandle final : public ConstrainedFileStreamBufBase
+    {
+    public:
+        using FileHandlePtr = std::shared_ptr<void>;
+
+        ConstrainedFileStreamBufWithSharedHandle(FileHandlePtr ptr, std::size_t start, std::size_t length);
+
+    private:
+        FileHandlePtr mFile;
+    };
 }
 
 #endif
