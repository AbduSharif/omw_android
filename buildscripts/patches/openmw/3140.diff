diff --git a/apps/openmw/mwgui/loadingscreen.cpp b/apps/openmw/mwgui/loadingscreen.cpp
index f86fa5164c8e1568ad524e6545ff933fb4720de4..3574333fda2e608b5de2304cacb8b7928c307a1e 100644
--- a/apps/openmw/mwgui/loadingscreen.cpp
+++ b/apps/openmw/mwgui/loadingscreen.cpp
@@ -295,6 +295,8 @@ namespace MWGui
         if (!mTexture)
         {
             mTexture = new osg::Texture2D;
+            mTexture->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+            mTexture->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
             mTexture->setInternalFormat(GL_RGB);
             mTexture->setResizeNonPowerOfTwoHint(false);
         }
diff --git a/apps/openmw/mwrender/characterpreview.cpp b/apps/openmw/mwrender/characterpreview.cpp
index a1219279354536cc0727b8f359a79a8d49e6d172..38238b121f10b6ea53335e6d0082a59f1294318e 100644
--- a/apps/openmw/mwrender/characterpreview.cpp
+++ b/apps/openmw/mwrender/characterpreview.cpp
@@ -268,6 +268,8 @@ namespace MWRender
         noBlendAlphaEnv->setCombine_RGB(osg::TexEnvCombine::REPLACE);
         noBlendAlphaEnv->setSource0_RGB(osg::TexEnvCombine::PREVIOUS);
         osg::ref_ptr<osg::Texture2D> dummyTexture = new osg::Texture2D();
+        dummyTexture->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+        dummyTexture->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
         dummyTexture->setInternalFormat(GL_DEPTH_COMPONENT);
         dummyTexture->setTextureSize(1, 1);
         // This might clash with a shadow map, so make sure it doesn't cast shadows
diff --git a/apps/openmw/mwrender/luminancecalculator.cpp b/apps/openmw/mwrender/luminancecalculator.cpp
index b267b94e596612eeccaa019fb5280edaf80b867a..e0d275b177bdae8834811d4357d14b28efc54a06 100644
--- a/apps/openmw/mwrender/luminancecalculator.cpp
+++ b/apps/openmw/mwrender/luminancecalculator.cpp
@@ -35,6 +35,8 @@ namespace MWRender
             buffer.mipmappedSceneLuminanceTex->setInternalFormat(GL_R16F);
             buffer.mipmappedSceneLuminanceTex->setSourceFormat(GL_RED);
             buffer.mipmappedSceneLuminanceTex->setSourceType(GL_FLOAT);
+            buffer.mipmappedSceneLuminanceTex->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+            buffer.mipmappedSceneLuminanceTex->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
             buffer.mipmappedSceneLuminanceTex->setFilter(
                 osg::Texture2D::MIN_FILTER, osg::Texture2D::LINEAR_MIPMAP_NEAREST);
             buffer.mipmappedSceneLuminanceTex->setFilter(osg::Texture2D::MAG_FILTER, osg::Texture2D::LINEAR);
@@ -45,11 +47,15 @@ namespace MWRender
             buffer.luminanceTex->setInternalFormat(GL_R16F);
             buffer.luminanceTex->setSourceFormat(GL_RED);
             buffer.luminanceTex->setSourceType(GL_FLOAT);
+            buffer.luminanceTex->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+            buffer.luminanceTex->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
             buffer.luminanceTex->setFilter(osg::Texture2D::MIN_FILTER, osg::Texture2D::NEAREST);
             buffer.luminanceTex->setFilter(osg::Texture2D::MAG_FILTER, osg::Texture2D::NEAREST);
             buffer.luminanceTex->setTextureSize(1, 1);
 
             buffer.luminanceProxyTex = new osg::Texture2D(*buffer.luminanceTex);
+            buffer.luminanceProxyTex->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+            buffer.luminanceProxyTex->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
 
             buffer.resolveFbo = new osg::FrameBufferObject;
             buffer.resolveFbo->setAttachment(osg::FrameBufferObject::BufferComponent::COLOR_BUFFER0,
diff --git a/apps/openmw/mwrender/postprocessor.cpp b/apps/openmw/mwrender/postprocessor.cpp
index 9ddae999507485bb81aa8187c701dcbb16c2c34f..d64e9651bc83e0896c2a687feebbd36672c16f4f 100644
--- a/apps/openmw/mwrender/postprocessor.cpp
+++ b/apps/openmw/mwrender/postprocessor.cpp
@@ -164,6 +164,8 @@ namespace MWRender
                     mTextures[i][Tex_OpaqueDepth] = new osg::Texture2DArray;
                 else
                     mTextures[i][Tex_OpaqueDepth] = new osg::Texture2D;
+                mTextures[i][Tex_OpaqueDepth]->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+                mTextures[i][Tex_OpaqueDepth]->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
             }
         }
 
diff --git a/apps/openmw/mwrender/precipitationocclusion.cpp b/apps/openmw/mwrender/precipitationocclusion.cpp
index 444ed8a1ed2cc3c10dd94593a8de642f63671f17..c1e11ae93b438a65f55772f763a60952a35af25c 100644
--- a/apps/openmw/mwrender/precipitationocclusion.cpp
+++ b/apps/openmw/mwrender/precipitationocclusion.cpp
@@ -48,6 +48,8 @@ namespace
             : mDummyTexture(new osg::Texture2D)
         {
             mDummyTexture->setInternalFormat(GL_RGB);
+            mDummyTexture->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+            mDummyTexture->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
             mDummyTexture->setTextureSize(1, 1);
 
             Shader::ShaderManager& shaderMgr
diff --git a/apps/openmw/mwrender/screenshotmanager.cpp b/apps/openmw/mwrender/screenshotmanager.cpp
index a0c7fabdbc8c94ee9dfa1dda72a7ade0093b1483..4179b2807ef89e9cd6632f8906a94a375c0a4380 100644
--- a/apps/openmw/mwrender/screenshotmanager.cpp
+++ b/apps/openmw/mwrender/screenshotmanager.cpp
@@ -315,6 +315,8 @@ namespace MWRender
         texture->setResizeNonPowerOfTwoHint(false);
         texture->setFilter(osg::Texture::MIN_FILTER, osg::Texture::LINEAR);
         texture->setFilter(osg::Texture::MAG_FILTER, osg::Texture::LINEAR);
+        texture->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+        texture->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
         camera->attach(osg::Camera::COLOR_BUFFER, texture);
 
         image->setDataType(GL_UNSIGNED_BYTE);
diff --git a/apps/openmw/mwrender/skyutil.cpp b/apps/openmw/mwrender/skyutil.cpp
index 661f9c305cf8bb23a59fdd36963504c15f06c0c5..2a21b950eb195584ac8f872b1d4c198880550d61 100644
--- a/apps/openmw/mwrender/skyutil.cpp
+++ b/apps/openmw/mwrender/skyutil.cpp
@@ -482,6 +482,8 @@ namespace MWRender
         , mTexture(new osg::Texture2D(imageManager->getWarningImage()))
         , mForceShaders(forceShaders)
     {
+        mTexture->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+        mTexture->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
     }
 
     void AtmosphereNightUpdater::setFade(float fade)
diff --git a/apps/openmw/mwrender/transparentpass.cpp b/apps/openmw/mwrender/transparentpass.cpp
index a0736b650b7e93892a22bd288b14eb8c408ab4b1..ce53b1c2193e8f13edbd0542acceae25ffd54c2d 100644
--- a/apps/openmw/mwrender/transparentpass.cpp
+++ b/apps/openmw/mwrender/transparentpass.cpp
@@ -26,6 +26,8 @@ namespace MWRender
         image->setColor(osg::Vec4(1, 1, 1, 1), 0, 0);
 
         osg::ref_ptr<osg::Texture2D> dummyTexture = new osg::Texture2D(image);
+        dummyTexture->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+        dummyTexture->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
 
         constexpr osg::StateAttribute::OverrideValue modeOff = osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE;
         constexpr osg::StateAttribute::OverrideValue modeOn = osg::StateAttribute::ON | osg::StateAttribute::OVERRIDE;
diff --git a/components/fx/parse_constants.hpp b/components/fx/parse_constants.hpp
index 3c9e3b59c83434c24081341ac8edd53e997b96f5..9be54ed3a763bab4f869c1d82064e1e12eb4ed7e 100644
--- a/components/fx/parse_constants.hpp
+++ b/components/fx/parse_constants.hpp
@@ -82,8 +82,7 @@ namespace fx
             { "s3tc_dxt1a", osg::Texture::USE_S3TC_DXT1a_COMPRESSION },
         } };
 
-        constexpr std::array<std::pair<std::string_view, osg::Texture::WrapMode>, 6> WrapMode = { {
-            { "clamp", osg::Texture::CLAMP },
+        constexpr std::array<std::pair<std::string_view, osg::Texture::WrapMode>, 4> WrapMode = { {
             { "clamp_to_edge", osg::Texture::CLAMP_TO_EDGE },
             { "clamp_to_border", osg::Texture::CLAMP_TO_BORDER },
             { "repeat", osg::Texture::REPEAT },
diff --git a/components/fx/technique.cpp b/components/fx/technique.cpp
index 787f43a4f6a0d4c022330a34f33a9ffe6096563e..fd1556674f09e62b30af4228f3be399a5396912d 100644
--- a/components/fx/technique.cpp
+++ b/components/fx/technique.cpp
@@ -277,6 +277,8 @@ namespace fx
         rt.mTarget->setSourceFormat(GL_RGB);
         rt.mTarget->setInternalFormat(GL_RGB);
         rt.mTarget->setSourceType(GL_UNSIGNED_BYTE);
+        rt.mTarget->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+        rt.mTarget->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
 
         while (!isNext<Lexer::Close_bracket>() && !isNext<Lexer::Eof>())
         {
diff --git a/components/myguiplatform/myguirendermanager.cpp b/components/myguiplatform/myguirendermanager.cpp
index 4ee1190a99f7a22ec042b3238cca5d954cd37f09..5d32641b6df3f0ff6e4444ab7017354f3658f2ed 100644
--- a/components/myguiplatform/myguirendermanager.cpp
+++ b/components/myguiplatform/myguirendermanager.cpp
@@ -184,6 +184,8 @@ namespace osgMyGUI
             mStateSet->setMode(GL_BLEND, osg::StateAttribute::ON);
 
             mDummyTexture = new osg::Texture2D;
+            mDummyTexture->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+            mDummyTexture->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
             mDummyTexture->setInternalFormat(GL_RGB);
             mDummyTexture->setTextureSize(1, 1);
 
diff --git a/components/sceneutil/shadow.cpp b/components/sceneutil/shadow.cpp
index 4cf8a892552bde9885135ec5f3b2f3a03bf14e8e..f2748d70f1340ac4e280c0676acaa392427a3f60 100644
--- a/components/sceneutil/shadow.cpp
+++ b/components/sceneutil/shadow.cpp
@@ -93,6 +93,8 @@ namespace SceneUtil
         fakeShadowMapImage->allocateImage(1, 1, 1, GL_DEPTH_COMPONENT, GL_FLOAT);
         *(float*)fakeShadowMapImage->data() = std::numeric_limits<float>::infinity();
         osg::ref_ptr<osg::Texture> fakeShadowMapTexture = new osg::Texture2D(fakeShadowMapImage);
+        fakeShadowMapTexture->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+        fakeShadowMapTexture->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
         fakeShadowMapTexture->setShadowComparison(true);
         fakeShadowMapTexture->setShadowCompareFunc(osg::Texture::ShadowCompareFunc::ALWAYS);
         for (int i = baseShadowTextureUnit; i < baseShadowTextureUnit + numberOfShadowMapsPerLight; ++i)
diff --git a/components/stereo/multiview.cpp b/components/stereo/multiview.cpp
index 5111870c2b70e9e916fc2516dd0c798c2c845562..047a52747b7dcb6ab8348eeb8e2848182fb2a5ef 100644
--- a/components/stereo/multiview.cpp
+++ b/components/stereo/multiview.cpp
@@ -243,6 +243,8 @@ namespace Stereo
         }
 
         osg::ref_ptr<osg::Texture2D> texture2d = new osg::Texture2D;
+        texture2d->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+        texture2d->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
         texture2d->setSubloadCallback(new Texture2DViewSubloadCallback(textureArray, layer));
         texture2d->setTextureSize(textureArray->getTextureWidth(), textureArray->getTextureHeight());
         texture2d->setBorderColor(textureArray->getBorderColor());
@@ -429,12 +431,16 @@ namespace Stereo
                 auto tex = new osg::Texture2DMultisample();
                 tex->setTextureSize(width, height);
                 tex->setNumSamples(samples);
+                tex->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+                tex->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
                 return tex;
             }
             else
             {
                 auto tex = new osg::Texture2D();
                 tex->setTextureSize(width, height);
+                tex->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
+                tex->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
                 return tex;
             }
         }