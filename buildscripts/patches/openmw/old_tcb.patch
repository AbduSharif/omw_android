diff --git a/apps/openmw/mwrender/bulletdebugdraw.cpp b/apps/openmw/mwrender/bulletdebugdraw.cpp
index b169251465f561ea0ac9d655562458bb9e129ae5..dcc41b30b99428906ef4c430172063b660fece49 100644
--- a/apps/openmw/mwrender/bulletdebugdraw.cpp
+++ b/apps/openmw/mwrender/bulletdebugdraw.cpp
@@ -1,6 +1,7 @@
 #include <algorithm>
 
 #include <BulletCollision/CollisionDispatch/btCollisionWorld.h>
+#include <BulletCollision/CollisionShapes/btHeightfieldTerrainShape.h>
 
 #include <osg/Geometry>
 #include <osg/Group>
@@ -8,15 +9,15 @@
 
 #include <components/debug/debuglog.hpp>
 #include <components/misc/convert.hpp>
-#include <components/sceneutil/depth.hpp>
 #include <osg/PolygonMode>
-#include <osg/PolygonOffset>
 #include <osg/ShapeDrawable>
 #include <osg/StateSet>
 
 #include "bulletdebugdraw.hpp"
 #include "vismask.hpp"
 
+#include "../mwmechanics/actorutil.hpp"
+
 #include <components/resource/resourcesystem.hpp>
 #include <components/resource/scenemanager.hpp>
 
@@ -35,69 +36,50 @@ DebugDrawer::DebugDrawer(osg::ref_ptr<osg::Group> parentNode, btCollisionWorld *
 
 void DebugDrawer::createGeometry()
 {
-    if (!mLinesGeometry)
+    if (!mGeometry)
     {
-        mLinesGeometry = new osg::Geometry;
-        mTrisGeometry = new osg::Geometry;
-        mLinesGeometry->setNodeMask(Mask_Debug);
-        mTrisGeometry->setNodeMask(Mask_Debug);
-
-        mLinesVertices = new osg::Vec3Array;
-        mTrisVertices = new osg::Vec3Array;
-        mLinesColors = new osg::Vec4Array;
+        mGeometry = new osg::Geometry;
+        mGeometry->setNodeMask(Mask_Debug);
 
-        mLinesDrawArrays = new osg::DrawArrays(osg::PrimitiveSet::LINES);
-        mTrisDrawArrays = new osg::DrawArrays(osg::PrimitiveSet::TRIANGLES);
+        mVertices = new osg::Vec3Array;
+        mColors = new osg::Vec4Array;
 
-        mLinesGeometry->setUseDisplayList(false);
-        mLinesGeometry->setVertexArray(mLinesVertices);
-        mLinesGeometry->setColorArray(mLinesColors);
-        mLinesGeometry->setColorBinding(osg::Geometry::BIND_PER_VERTEX);
-        mLinesGeometry->setDataVariance(osg::Object::DYNAMIC);
-        mLinesGeometry->addPrimitiveSet(mLinesDrawArrays);
+        mDrawArrays = new osg::DrawArrays(osg::PrimitiveSet::LINES);
+        
+        mGeometry->setUseDisplayList(false);
+        mGeometry->setVertexArray(mVertices);
+        mGeometry->setColorArray(mColors);
+        mGeometry->setColorBinding(osg::Geometry::BIND_PER_VERTEX);
+        mGeometry->setDataVariance(osg::Object::DYNAMIC);
+        mGeometry->addPrimitiveSet(mDrawArrays);
 
-        mTrisGeometry->setUseDisplayList(false);
-        mTrisGeometry->setVertexArray(mTrisVertices);
-        mTrisGeometry->setDataVariance(osg::Object::DYNAMIC);
-        mTrisGeometry->addPrimitiveSet(mTrisDrawArrays);
-
-        mParentNode->addChild(mLinesGeometry);
-        mParentNode->addChild(mTrisGeometry);
+        osg::ref_ptr<osg::Material> material = new osg::Material;
+        material->setColorMode(osg::Material::AMBIENT_AND_DIFFUSE);
+        mGeometry->getOrCreateStateSet()->setAttribute(material);
 
+        mParentNode->addChild(mGeometry);
+        
         auto* stateSet = new osg::StateSet;
         stateSet->setAttributeAndModes(new osg::PolygonMode(osg::PolygonMode::FRONT_AND_BACK, osg::PolygonMode::LINE), osg::StateAttribute::ON);
-        stateSet->setAttributeAndModes(new osg::PolygonOffset(SceneUtil::AutoDepth::isReversed() ? 1.0 : -1.0, SceneUtil::AutoDepth::isReversed() ? 1.0 : -1.0));
-        osg::ref_ptr<osg::Material> material = new osg::Material;
-        material->setColorMode(osg::Material::AMBIENT_AND_DIFFUSE);
-        stateSet->setAttribute(material);
-        mLinesGeometry->setStateSet(stateSet);
-        mTrisGeometry->setStateSet(stateSet);
         mShapesRoot = new osg::Group;
         mShapesRoot->setStateSet(stateSet);
         mShapesRoot->setDataVariance(osg::Object::DYNAMIC);
         mShapesRoot->setNodeMask(Mask_Debug);
         mParentNode->addChild(mShapesRoot);
 
-        MWBase::Environment::get().getResourceSystem()->getSceneManager()->recreateShaders(mLinesGeometry, "debug");
-        MWBase::Environment::get().getResourceSystem()->getSceneManager()->recreateShaders(mTrisGeometry, "debug");
-        MWBase::Environment::get().getResourceSystem()->getSceneManager()->recreateShaders(mShapesRoot, "debug");
+        MWBase::Environment::get().getResourceSystem()->getSceneManager()->recreateShaders(mGeometry, "debug");
     }
 }
 
 void DebugDrawer::destroyGeometry()
 {
-    if (mLinesGeometry)
+    if (mGeometry)
     {
-        mParentNode->removeChild(mLinesGeometry);
-        mParentNode->removeChild(mTrisGeometry);
+        mParentNode->removeChild(mGeometry);
         mParentNode->removeChild(mShapesRoot);
-        mLinesGeometry = nullptr;
-        mLinesVertices = nullptr;
-        mLinesColors = nullptr;
-        mLinesDrawArrays = nullptr;
-        mTrisGeometry = nullptr;
-        mTrisVertices = nullptr;
-        mTrisDrawArrays = nullptr;
+        mGeometry = nullptr;
+        mVertices = nullptr;
+        mDrawArrays = nullptr;
     }
 }
 
@@ -110,60 +92,53 @@ void DebugDrawer::step()
 {
     if (mDebugOn)
     {
-        mLinesVertices->clear();
-        mTrisVertices->clear();
-        mLinesColors->clear();
+        mVertices->clear();
+        mColors->clear();
         mShapesRoot->removeChildren(0, mShapesRoot->getNumChildren());
+        auto player = MWMechanics::getPlayer();
+        if (player)
+        {
+            osg::Vec3f playerPos = player.getRefData().getPosition().asVec3();
+            auto objArray = mWorld->getCollisionObjectArray();
+            for(ptrdiff_t i = 0; i < objArray.size(); i++)
+            {
+                auto obj = objArray[i];
+                osg::Vec3f origin = Misc::Convert::toOsg(obj->getWorldTransform().getOrigin());
+                auto shape = obj->getCollisionShape();
+                float radius = 0;
+                osg::Vec3f offset{};
+                if(shape)
+                {
+                    btVector3 minCoord, maxCoord;
+                    shape->getAabb(obj->getWorldTransform(), minCoord, maxCoord);
+                    origin = Misc::Convert::toOsg(maxCoord+minCoord)/2.0;
+                    radius = (Misc::Convert::toOsg(maxCoord)-origin).length();
+                }
+                float newRadius = 2048+radius;
+
+                auto flags = obj->getCollisionFlags();
+                if((origin - playerPos).length2() <= newRadius*newRadius)
+                    flags &= ~btCollisionObject::CF_DISABLE_VISUALIZE_OBJECT;
+                else
+                    flags |= btCollisionObject::CF_DISABLE_VISUALIZE_OBJECT;
+                obj->setCollisionFlags(flags);
+            }
+        }
         mWorld->debugDrawWorld();
         showCollisions();
-        mLinesDrawArrays->setCount(mLinesVertices->size());
-        mTrisDrawArrays->setCount(mTrisVertices->size());
-        mLinesVertices->dirty();
-        mTrisVertices->dirty();
-        mLinesColors->dirty();
-        mLinesGeometry->dirtyBound();
-        mTrisGeometry->dirtyBound();
+        mDrawArrays->setCount(mVertices->size());
+        mVertices->dirty();
+        mColors->dirty();
+        mGeometry->dirtyBound();
     }
 }
 
 void DebugDrawer::drawLine(const btVector3 &from, const btVector3 &to, const btVector3 &color)
 {
-    mLinesVertices->push_back(Misc::Convert::toOsg(from));
-    mLinesVertices->push_back(Misc::Convert::toOsg(to));
-    mLinesColors->push_back({1,1,1,1});
-    mLinesColors->push_back({1,1,1,1});
-
-#if BT_BULLET_VERSION < 317
-    size_t size = mLinesVertices->size();
-    if (size >= 6
-        && (*mLinesVertices)[size - 1] == (*mLinesVertices)[size - 6]
-        && (*mLinesVertices)[size - 2] == (*mLinesVertices)[size - 3]
-        && (*mLinesVertices)[size - 4] == (*mLinesVertices)[size - 5])
-    {
-        mTrisVertices->push_back(mLinesVertices->back());
-        mLinesVertices->pop_back();
-        mLinesColors->pop_back();
-        mTrisVertices->push_back(mLinesVertices->back());
-        mLinesVertices->pop_back();
-        mLinesColors->pop_back();
-        mLinesVertices->pop_back();
-        mLinesColors->pop_back();
-        mTrisVertices->push_back(mLinesVertices->back());
-        mLinesVertices->pop_back();
-        mLinesColors->pop_back();
-        mLinesVertices->pop_back();
-        mLinesColors->pop_back();
-        mLinesVertices->pop_back();
-        mLinesColors->pop_back();
-    }
-#endif
-}
-
-void DebugDrawer::drawTriangle(const btVector3& v0, const btVector3& v1, const btVector3& v2, const btVector3& color, btScalar)
-{
-    mTrisVertices->push_back(Misc::Convert::toOsg(v0));
-    mTrisVertices->push_back(Misc::Convert::toOsg(v1));
-    mTrisVertices->push_back(Misc::Convert::toOsg(v2));
+    mVertices->push_back(Misc::Convert::toOsg(from));
+    mVertices->push_back(Misc::Convert::toOsg(to));
+    mColors->push_back({1,1,1,1});
+    mColors->push_back({1,1,1,1});
 }
 
 void DebugDrawer::addCollision(const btVector3& orig, const btVector3& normal)
@@ -178,10 +153,10 @@ void DebugDrawer::showCollisions()
     {
         if (now - created < std::chrono::seconds(2))
         {
-            mLinesVertices->push_back(Misc::Convert::toOsg(from));
-            mLinesVertices->push_back(Misc::Convert::toOsg(to));
-            mLinesColors->push_back({1,0,0,1});
-            mLinesColors->push_back({1,0,0,1});
+            mVertices->push_back(Misc::Convert::toOsg(from));
+            mVertices->push_back(Misc::Convert::toOsg(to));
+            mColors->push_back({1,0,0,1});
+            mColors->push_back({1,0,0,1});
         }
     }
     mCollisionViews.erase(std::remove_if(mCollisionViews.begin(), mCollisionViews.end(),
diff --git a/apps/openmw/mwrender/bulletdebugdraw.hpp b/apps/openmw/mwrender/bulletdebugdraw.hpp
index cea5794ba7a2ddd3800d59053e1501b607a95694..22c054d819423a6bbf0fa0301fe7d1c5d018f811 100644
--- a/apps/openmw/mwrender/bulletdebugdraw.hpp
+++ b/apps/openmw/mwrender/bulletdebugdraw.hpp
@@ -37,13 +37,10 @@ private:
 protected:
     osg::ref_ptr<osg::Group> mParentNode;
     btCollisionWorld *mWorld;
-    osg::ref_ptr<osg::Geometry> mLinesGeometry;
-    osg::ref_ptr<osg::Geometry> mTrisGeometry;
-    osg::ref_ptr<osg::Vec3Array> mLinesVertices;
-    osg::ref_ptr<osg::Vec3Array> mTrisVertices;
-    osg::ref_ptr<osg::Vec4Array> mLinesColors;
-    osg::ref_ptr<osg::DrawArrays> mLinesDrawArrays;
-    osg::ref_ptr<osg::DrawArrays> mTrisDrawArrays;
+    osg::ref_ptr<osg::Geometry> mGeometry;
+    osg::ref_ptr<osg::Vec3Array> mVertices;
+    osg::ref_ptr<osg::Vec4Array> mColors;
+    osg::ref_ptr<osg::DrawArrays> 
 
     bool mDebugOn;
 
@@ -59,8 +56,6 @@ public:
 
     void drawLine(const btVector3& from,const btVector3& to,const btVector3& color) override;
 
-    void drawTriangle(const btVector3& v0, const btVector3& v1, const btVector3& v2, const btVector3& color, btScalar) override;
-
     void addCollision(const btVector3& orig, const btVector3& normal);
 
     void showCollisions();
